%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 591 145
%%Creator: yExport 1.5
%%Producer: org.freehep.graphicsio.ps.EPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Monday, August 5, 2019 at 1:49:30 PM Central European Summer Time
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
591 145 setpagesize
0 0 0 0 setmargins
0 0 setorigin
591 145 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
591.000 0.00000 l
591.000 145.000 l
0.00000 145.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
591.000 0.00000 l
591.000 145.000 l
0.00000 145.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 591 145 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -387.000 -272.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
387.000 272.000 m
978.000 272.000 l
978.000 417.000 l
387.000 417.000 l
387.000 272.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -387.000 -272.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -387.000 -272.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -387.000 -272.000 ] defaultmatrix matrix concatmatrix setmatrix
1.00000 .800000 0.00000 RG
newpath
561.500 288.000 m
651.500 288.000 l
651.500 313.000 l
561.500 313.000 l
561.500 288.000 l
h
f
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
561.500 288.000 m
651.500 288.000 l
651.500 313.000 l
561.500 313.000 l
561.500 288.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
587.531 304.790 m
589.109 304.540 l
589.192 305.165 589.432 305.644 589.828 305.977  c
590.234 306.310 590.796 306.477 591.515 306.477  c
592.244 306.477 592.786 306.331 593.140 306.040  c
593.494 305.737 593.671 305.389 593.671 304.993  c
593.671 304.639 593.515 304.357 593.203 304.149  c
592.984 304.014 592.442 303.836 591.578 303.618  c
590.421 303.326 589.619 303.076 589.171 302.868  c
588.723 302.649 588.380 302.352 588.140 301.977  c
587.911 301.592 587.796 301.170 587.796 300.711  c
587.796 300.295 587.890 299.909 588.078 299.555  c
588.276 299.201 588.536 298.909 588.859 298.680  c
589.109 298.493 589.447 298.336 589.875 298.211  c
590.302 298.086 590.755 298.024 591.234 298.024  c
591.973 298.024 592.619 298.133 593.171 298.352  c
593.723 298.560 594.130 298.847 594.390 299.211  c
594.661 299.566 594.843 300.045 594.937 300.649  c
593.390 300.852 l
593.317 300.373 593.114 299.998 592.781 299.727  c
592.447 299.456 591.973 299.321 591.359 299.321  c
590.630 299.321 590.109 299.441 589.796 299.680  c
589.484 299.920 589.328 300.201 589.328 300.524  c
589.328 300.732 589.395 300.920 589.531 301.086  c
589.656 301.253 589.854 301.394 590.125 301.508  c
590.291 301.560 590.760 301.696 591.531 301.915  c
592.645 302.206 593.421 302.451 593.859 302.649  c
594.307 302.836 594.656 303.112 594.906 303.477  c
595.166 303.842 595.296 304.290 595.296 304.821  c
595.296 305.352 595.140 305.852 594.828 306.321  c
594.526 306.790 594.083 307.154 593.500 307.415  c
592.916 307.665 592.260 307.790 591.531 307.790  c
590.312 307.790 589.385 307.540 588.750 307.040  c
588.114 306.529 587.708 305.779 587.531 304.790  c
h
603.562 304.571 m
605.203 304.774 l
604.942 305.722 604.463 306.461 603.765 306.993  c
603.067 307.524 602.177 307.790 601.093 307.790  c
599.729 307.790 598.645 307.368 597.843 306.524  c
597.041 305.680 596.640 304.498 596.640 302.977  c
596.640 301.415 597.041 300.201 597.843 299.336  c
598.656 298.461 599.708 298.024 601.000 298.024  c
602.250 298.024 603.270 298.451 604.062 299.305  c
604.854 300.149 605.250 301.342 605.250 302.883  c
605.250 302.977 605.244 303.118 605.234 303.305  c
598.281 303.305 l
598.333 304.336 598.619 305.123 599.140 305.665  c
599.671 306.206 600.322 306.477 601.093 306.477  c
601.677 306.477 602.171 306.326 602.578 306.024  c
602.994 305.722 603.322 305.237 603.562 304.571  c
h
598.359 302.008 m
603.578 302.008 l
603.505 301.227 603.307 300.639 602.984 300.243  c
602.473 299.628 601.817 299.321 601.015 299.321  c
600.296 299.321 599.687 299.566 599.187 300.055  c
598.697 300.545 598.421 301.196 598.359 302.008  c
h
613.573 304.571 m
615.213 304.774 l
614.953 305.722 614.474 306.461 613.776 306.993  c
613.078 307.524 612.187 307.790 611.104 307.790  c
609.739 307.790 608.656 307.368 607.854 306.524  c
607.052 305.680 606.651 304.498 606.651 302.977  c
606.651 301.415 607.052 300.201 607.854 299.336  c
608.667 298.461 609.719 298.024 611.010 298.024  c
612.260 298.024 613.281 298.451 614.073 299.305  c
614.864 300.149 615.260 301.342 615.260 302.883  c
615.260 302.977 615.255 303.118 615.245 303.305  c
608.292 303.305 l
608.344 304.336 608.630 305.123 609.151 305.665  c
609.682 306.206 610.333 306.477 611.104 306.477  c
611.687 306.477 612.182 306.326 612.588 306.024  c
613.005 305.722 613.333 305.237 613.573 304.571  c
h
608.370 302.008 m
613.588 302.008 l
613.515 301.227 613.318 300.639 612.995 300.243  c
612.484 299.628 611.828 299.321 611.026 299.321  c
610.307 299.321 609.698 299.566 609.198 300.055  c
608.708 300.545 608.432 301.196 608.370 302.008  c
h
623.255 307.571 m
623.255 306.399 l
622.662 307.326 621.787 307.790 620.630 307.790  c
619.891 307.790 619.208 307.586 618.583 307.180  c
617.958 306.764 617.474 306.191 617.130 305.461  c
616.787 304.722 616.615 303.873 616.615 302.915  c
616.615 301.977 616.771 301.133 617.083 300.383  c
617.396 299.623 617.860 299.040 618.474 298.633  c
619.099 298.227 619.797 298.024 620.568 298.024  c
621.130 298.024 621.630 298.144 622.068 298.383  c
622.505 298.623 622.865 298.930 623.146 299.305  c
623.146 294.680 l
624.708 294.680 l
624.708 307.571 l
623.255 307.571 l
h
618.240 302.915 m
618.240 304.112 618.490 305.008 618.990 305.602  c
619.500 306.185 620.099 306.477 620.787 306.477  c
621.474 306.477 622.057 306.196 622.537 305.633  c
623.026 305.071 623.271 304.206 623.271 303.040  c
623.271 301.769 623.026 300.836 622.537 300.243  c
622.047 299.639 621.443 299.336 620.724 299.336  c
620.016 299.336 619.422 299.623 618.943 300.196  c
618.474 300.769 618.240 301.675 618.240 302.915  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
446.150 306.196 m
446.942 306.737 447.671 307.133 448.338 307.383  c
447.838 308.571 l
446.911 308.237 445.989 307.711 445.072 306.993  c
444.114 307.524 443.057 307.790 441.900 307.790  c
440.734 307.790 439.676 307.508 438.729 306.946  c
437.781 306.383 437.051 305.592 436.541 304.571  c
436.031 303.550 435.775 302.404 435.775 301.133  c
435.775 299.862 436.031 298.706 436.541 297.665  c
437.062 296.612 437.796 295.816 438.744 295.274  c
439.692 294.732 440.755 294.461 441.932 294.461  c
443.130 294.461 444.202 294.743 445.150 295.305  c
446.109 295.868 446.838 296.659 447.338 297.680  c
447.838 298.691 448.088 299.836 448.088 301.118  c
448.088 302.180 447.926 303.133 447.604 303.977  c
447.281 304.821 446.796 305.560 446.150 306.196  c
h
442.400 304.008 m
443.380 304.290 444.187 304.701 444.822 305.243  c
445.833 304.326 446.338 302.951 446.338 301.118  c
446.338 300.076 446.161 299.165 445.807 298.383  c
445.452 297.602 444.932 296.998 444.244 296.571  c
443.567 296.144 442.801 295.930 441.947 295.930  c
440.676 295.930 439.619 296.368 438.775 297.243  c
437.942 298.107 437.525 299.404 437.525 301.133  c
437.525 302.810 437.937 304.097 438.760 304.993  c
439.593 305.889 440.656 306.336 441.947 306.336  c
442.551 306.336 443.124 306.222 443.666 305.993  c
443.135 305.649 442.572 305.399 441.979 305.243  c
442.400 304.008 l
h
455.698 307.571 m
454.120 307.571 l
454.120 297.493 l
453.735 297.857 453.235 298.222 452.620 298.586  c
452.006 298.941 451.448 299.211 450.948 299.399  c
450.948 297.868 l
451.834 297.451 452.610 296.946 453.276 296.352  c
453.943 295.758 454.412 295.185 454.683 294.633  c
455.698 294.633 l
455.698 307.571 l
h
f
2 J
10.0000 M
1.00000 .800000 0.00000 RG
newpath
492.000 332.000 m
582.000 332.000 l
582.000 357.000 l
492.000 357.000 l
492.000 332.000 l
h
f
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
492.000 332.000 m
582.000 332.000 l
582.000 357.000 l
492.000 357.000 l
492.000 332.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
518.031 348.790 m
519.609 348.540 l
519.692 349.165 519.932 349.644 520.328 349.977  c
520.734 350.310 521.296 350.477 522.015 350.477  c
522.744 350.477 523.286 350.331 523.640 350.040  c
523.994 349.737 524.171 349.389 524.171 348.993  c
524.171 348.639 524.015 348.357 523.703 348.149  c
523.484 348.014 522.942 347.836 522.078 347.618  c
520.921 347.326 520.119 347.076 519.671 346.868  c
519.223 346.649 518.880 346.352 518.640 345.977  c
518.411 345.592 518.296 345.170 518.296 344.711  c
518.296 344.295 518.390 343.909 518.578 343.555  c
518.776 343.201 519.036 342.909 519.359 342.680  c
519.609 342.493 519.947 342.336 520.375 342.211  c
520.802 342.086 521.255 342.024 521.734 342.024  c
522.473 342.024 523.119 342.133 523.671 342.352  c
524.223 342.560 524.630 342.847 524.890 343.211  c
525.161 343.566 525.343 344.045 525.437 344.649  c
523.890 344.852 l
523.817 344.373 523.614 343.998 523.281 343.727  c
522.947 343.456 522.473 343.321 521.859 343.321  c
521.130 343.321 520.609 343.441 520.296 343.680  c
519.984 343.920 519.828 344.201 519.828 344.524  c
519.828 344.732 519.895 344.920 520.031 345.086  c
520.156 345.253 520.354 345.394 520.625 345.508  c
520.791 345.560 521.260 345.696 522.031 345.915  c
523.145 346.206 523.921 346.451 524.359 346.649  c
524.807 346.836 525.156 347.112 525.406 347.477  c
525.666 347.842 525.796 348.290 525.796 348.821  c
525.796 349.352 525.640 349.852 525.328 350.321  c
525.026 350.790 524.583 351.154 524.000 351.415  c
523.416 351.665 522.760 351.790 522.031 351.790  c
520.812 351.790 519.885 351.540 519.250 351.040  c
518.614 350.529 518.208 349.779 518.031 348.790  c
h
534.062 348.571 m
535.703 348.774 l
535.442 349.722 534.963 350.461 534.265 350.993  c
533.567 351.524 532.677 351.790 531.593 351.790  c
530.229 351.790 529.145 351.368 528.343 350.524  c
527.541 349.680 527.140 348.498 527.140 346.977  c
527.140 345.415 527.541 344.201 528.343 343.336  c
529.156 342.461 530.208 342.024 531.500 342.024  c
532.750 342.024 533.770 342.451 534.562 343.305  c
535.354 344.149 535.750 345.342 535.750 346.883  c
535.750 346.977 535.744 347.118 535.734 347.305  c
528.781 347.305 l
528.833 348.336 529.119 349.123 529.640 349.665  c
530.171 350.206 530.822 350.477 531.593 350.477  c
532.177 350.477 532.671 350.326 533.078 350.024  c
533.494 349.722 533.822 349.237 534.062 348.571  c
h
528.859 346.008 m
534.078 346.008 l
534.005 345.227 533.807 344.639 533.484 344.243  c
532.973 343.628 532.317 343.321 531.515 343.321  c
530.796 343.321 530.187 343.566 529.687 344.055  c
529.197 344.545 528.921 345.196 528.859 346.008  c
h
544.073 348.571 m
545.713 348.774 l
545.453 349.722 544.974 350.461 544.276 350.993  c
543.578 351.524 542.687 351.790 541.604 351.790  c
540.239 351.790 539.156 351.368 538.354 350.524  c
537.552 349.680 537.151 348.498 537.151 346.977  c
537.151 345.415 537.552 344.201 538.354 343.336  c
539.167 342.461 540.219 342.024 541.510 342.024  c
542.760 342.024 543.781 342.451 544.573 343.305  c
545.364 344.149 545.760 345.342 545.760 346.883  c
545.760 346.977 545.755 347.118 545.745 347.305  c
538.792 347.305 l
538.844 348.336 539.130 349.123 539.651 349.665  c
540.182 350.206 540.833 350.477 541.604 350.477  c
542.187 350.477 542.682 350.326 543.088 350.024  c
543.505 349.722 543.833 349.237 544.073 348.571  c
h
538.870 346.008 m
544.088 346.008 l
544.015 345.227 543.818 344.639 543.495 344.243  c
542.984 343.628 542.328 343.321 541.526 343.321  c
540.807 343.321 540.198 343.566 539.698 344.055  c
539.208 344.545 538.932 345.196 538.870 346.008  c
h
553.755 351.571 m
553.755 350.399 l
553.162 351.326 552.287 351.790 551.130 351.790  c
550.391 351.790 549.708 351.586 549.083 351.180  c
548.458 350.764 547.974 350.191 547.630 349.461  c
547.287 348.722 547.115 347.873 547.115 346.915  c
547.115 345.977 547.271 345.133 547.583 344.383  c
547.896 343.623 548.360 343.040 548.974 342.633  c
549.599 342.227 550.297 342.024 551.068 342.024  c
551.630 342.024 552.130 342.144 552.568 342.383  c
553.005 342.623 553.365 342.930 553.646 343.305  c
553.646 338.680 l
555.208 338.680 l
555.208 351.571 l
553.755 351.571 l
h
548.740 346.915 m
548.740 348.112 548.990 349.008 549.490 349.602  c
550.000 350.185 550.599 350.477 551.287 350.477  c
551.974 350.477 552.557 350.196 553.037 349.633  c
553.526 349.071 553.771 348.206 553.771 347.040  c
553.771 345.769 553.526 344.836 553.037 344.243  c
552.547 343.639 551.943 343.336 551.224 343.336  c
550.516 343.336 549.922 343.623 549.443 344.196  c
548.974 344.769 548.740 345.675 548.740 346.915  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
446.150 350.196 m
446.942 350.737 447.671 351.133 448.338 351.383  c
447.838 352.571 l
446.911 352.237 445.989 351.711 445.072 350.993  c
444.114 351.524 443.057 351.790 441.900 351.790  c
440.734 351.790 439.676 351.508 438.729 350.946  c
437.781 350.383 437.051 349.592 436.541 348.571  c
436.031 347.550 435.775 346.404 435.775 345.133  c
435.775 343.862 436.031 342.706 436.541 341.665  c
437.062 340.612 437.796 339.816 438.744 339.274  c
439.692 338.732 440.755 338.461 441.932 338.461  c
443.130 338.461 444.202 338.743 445.150 339.305  c
446.109 339.868 446.838 340.659 447.338 341.680  c
447.838 342.691 448.088 343.836 448.088 345.118  c
448.088 346.180 447.926 347.133 447.604 347.977  c
447.281 348.821 446.796 349.560 446.150 350.196  c
h
442.400 348.008 m
443.380 348.290 444.187 348.701 444.822 349.243  c
445.833 348.326 446.338 346.951 446.338 345.118  c
446.338 344.076 446.161 343.165 445.807 342.383  c
445.452 341.602 444.932 340.998 444.244 340.571  c
443.567 340.144 442.801 339.930 441.947 339.930  c
440.676 339.930 439.619 340.368 438.775 341.243  c
437.942 342.107 437.525 343.404 437.525 345.133  c
437.525 346.810 437.937 348.097 438.760 348.993  c
439.593 349.889 440.656 350.336 441.947 350.336  c
442.551 350.336 443.124 350.222 443.666 349.993  c
443.135 349.649 442.572 349.399 441.979 349.243  c
442.400 348.008 l
h
458.058 350.055 m
458.058 351.571 l
449.542 351.571 l
449.532 351.185 449.594 350.821 449.729 350.477  c
449.948 349.894 450.292 349.321 450.761 348.758  c
451.240 348.196 451.933 347.545 452.839 346.805  c
454.235 345.659 455.177 344.753 455.667 344.086  c
456.167 343.409 456.417 342.774 456.417 342.180  c
456.417 341.545 456.193 341.014 455.745 340.586  c
455.297 340.159 454.714 339.946 453.995 339.946  c
453.224 339.946 452.610 340.175 452.151 340.633  c
451.703 341.092 451.474 341.722 451.464 342.524  c
449.839 342.352 l
449.953 341.144 450.370 340.222 451.089 339.586  c
451.818 338.951 452.797 338.633 454.026 338.633  c
455.256 338.633 456.229 338.977 456.948 339.665  c
457.677 340.352 458.042 341.201 458.042 342.211  c
458.042 342.722 457.933 343.227 457.714 343.727  c
457.506 344.227 457.157 344.753 456.667 345.305  c
456.177 345.857 455.365 346.612 454.229 347.571  c
453.282 348.373 452.672 348.915 452.401 349.196  c
452.131 349.477 451.912 349.764 451.745 350.055  c
458.058 350.055 l
h
f
2 J
10.0000 M
1.00000 .800000 0.00000 RG
newpath
734.000 376.000 m
824.000 376.000 l
824.000 401.000 l
734.000 401.000 l
734.000 376.000 l
h
f
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
734.000 376.000 m
824.000 376.000 l
824.000 401.000 l
734.000 401.000 l
734.000 376.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
760.031 392.790 m
761.609 392.540 l
761.692 393.165 761.932 393.644 762.328 393.977  c
762.734 394.310 763.296 394.477 764.015 394.477  c
764.744 394.477 765.286 394.331 765.640 394.040  c
765.994 393.737 766.171 393.389 766.171 392.993  c
766.171 392.639 766.015 392.357 765.703 392.149  c
765.484 392.014 764.942 391.836 764.078 391.618  c
762.921 391.326 762.119 391.076 761.671 390.868  c
761.223 390.649 760.880 390.352 760.640 389.977  c
760.411 389.592 760.296 389.170 760.296 388.711  c
760.296 388.295 760.390 387.909 760.578 387.555  c
760.776 387.201 761.036 386.909 761.359 386.680  c
761.609 386.493 761.947 386.336 762.375 386.211  c
762.802 386.086 763.255 386.024 763.734 386.024  c
764.473 386.024 765.119 386.133 765.671 386.352  c
766.223 386.560 766.630 386.847 766.890 387.211  c
767.161 387.566 767.343 388.045 767.437 388.649  c
765.890 388.852 l
765.817 388.373 765.614 387.998 765.281 387.727  c
764.947 387.456 764.473 387.321 763.859 387.321  c
763.130 387.321 762.609 387.441 762.296 387.680  c
761.984 387.920 761.828 388.201 761.828 388.524  c
761.828 388.732 761.895 388.920 762.031 389.086  c
762.156 389.253 762.354 389.394 762.625 389.508  c
762.791 389.560 763.260 389.696 764.031 389.915  c
765.145 390.206 765.921 390.451 766.359 390.649  c
766.807 390.836 767.156 391.112 767.406 391.477  c
767.666 391.842 767.796 392.290 767.796 392.821  c
767.796 393.352 767.640 393.852 767.328 394.321  c
767.026 394.790 766.583 395.154 766.000 395.415  c
765.416 395.665 764.760 395.790 764.031 395.790  c
762.812 395.790 761.885 395.540 761.250 395.040  c
760.614 394.529 760.208 393.779 760.031 392.790  c
h
776.062 392.571 m
777.703 392.774 l
777.442 393.722 776.963 394.461 776.265 394.993  c
775.567 395.524 774.677 395.790 773.593 395.790  c
772.229 395.790 771.145 395.368 770.343 394.524  c
769.541 393.680 769.140 392.498 769.140 390.977  c
769.140 389.415 769.541 388.201 770.343 387.336  c
771.156 386.461 772.208 386.024 773.500 386.024  c
774.750 386.024 775.770 386.451 776.562 387.305  c
777.354 388.149 777.750 389.342 777.750 390.883  c
777.750 390.977 777.744 391.118 777.734 391.305  c
770.781 391.305 l
770.833 392.336 771.119 393.123 771.640 393.665  c
772.171 394.206 772.822 394.477 773.593 394.477  c
774.177 394.477 774.671 394.326 775.078 394.024  c
775.494 393.722 775.822 393.237 776.062 392.571  c
h
770.859 390.008 m
776.078 390.008 l
776.005 389.227 775.807 388.639 775.484 388.243  c
774.973 387.628 774.317 387.321 773.515 387.321  c
772.796 387.321 772.187 387.566 771.687 388.055  c
771.197 388.545 770.921 389.196 770.859 390.008  c
h
786.073 392.571 m
787.713 392.774 l
787.453 393.722 786.974 394.461 786.276 394.993  c
785.578 395.524 784.687 395.790 783.604 395.790  c
782.239 395.790 781.156 395.368 780.354 394.524  c
779.552 393.680 779.151 392.498 779.151 390.977  c
779.151 389.415 779.552 388.201 780.354 387.336  c
781.167 386.461 782.219 386.024 783.510 386.024  c
784.760 386.024 785.781 386.451 786.573 387.305  c
787.364 388.149 787.760 389.342 787.760 390.883  c
787.760 390.977 787.755 391.118 787.745 391.305  c
780.792 391.305 l
780.844 392.336 781.130 393.123 781.651 393.665  c
782.182 394.206 782.833 394.477 783.604 394.477  c
784.187 394.477 784.682 394.326 785.088 394.024  c
785.505 393.722 785.833 393.237 786.073 392.571  c
h
780.870 390.008 m
786.088 390.008 l
786.015 389.227 785.818 388.639 785.495 388.243  c
784.984 387.628 784.328 387.321 783.526 387.321  c
782.807 387.321 782.198 387.566 781.698 388.055  c
781.208 388.545 780.932 389.196 780.870 390.008  c
h
795.755 395.571 m
795.755 394.399 l
795.162 395.326 794.287 395.790 793.130 395.790  c
792.391 395.790 791.708 395.586 791.083 395.180  c
790.458 394.764 789.974 394.191 789.630 393.461  c
789.287 392.722 789.115 391.873 789.115 390.915  c
789.115 389.977 789.271 389.133 789.583 388.383  c
789.896 387.623 790.360 387.040 790.974 386.633  c
791.599 386.227 792.297 386.024 793.068 386.024  c
793.630 386.024 794.130 386.144 794.568 386.383  c
795.005 386.623 795.365 386.930 795.646 387.305  c
795.646 382.680 l
797.208 382.680 l
797.208 395.571 l
795.755 395.571 l
h
790.740 390.915 m
790.740 392.112 790.990 393.008 791.490 393.602  c
792.000 394.185 792.599 394.477 793.287 394.477  c
793.974 394.477 794.557 394.196 795.037 393.633  c
795.526 393.071 795.771 392.206 795.771 391.040  c
795.771 389.769 795.526 388.836 795.037 388.243  c
794.547 387.639 793.943 387.336 793.224 387.336  c
792.516 387.336 791.922 387.623 791.443 388.196  c
790.974 388.769 790.740 389.675 790.740 390.915  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
446.150 394.196 m
446.942 394.737 447.671 395.133 448.338 395.383  c
447.838 396.571 l
446.911 396.237 445.989 395.711 445.072 394.993  c
444.114 395.524 443.057 395.790 441.900 395.790  c
440.734 395.790 439.676 395.508 438.729 394.946  c
437.781 394.383 437.051 393.592 436.541 392.571  c
436.031 391.550 435.775 390.404 435.775 389.133  c
435.775 387.862 436.031 386.706 436.541 385.665  c
437.062 384.612 437.796 383.816 438.744 383.274  c
439.692 382.732 440.755 382.461 441.932 382.461  c
443.130 382.461 444.202 382.743 445.150 383.305  c
446.109 383.868 446.838 384.659 447.338 385.680  c
447.838 386.691 448.088 387.836 448.088 389.118  c
448.088 390.180 447.926 391.133 447.604 391.977  c
447.281 392.821 446.796 393.560 446.150 394.196  c
h
442.400 392.008 m
443.380 392.290 444.187 392.701 444.822 393.243  c
445.833 392.326 446.338 390.951 446.338 389.118  c
446.338 388.076 446.161 387.165 445.807 386.383  c
445.452 385.602 444.932 384.998 444.244 384.571  c
443.567 384.144 442.801 383.930 441.947 383.930  c
440.676 383.930 439.619 384.368 438.775 385.243  c
437.942 386.107 437.525 387.404 437.525 389.133  c
437.525 390.810 437.937 392.097 438.760 392.993  c
439.593 393.889 440.656 394.336 441.947 394.336  c
442.551 394.336 443.124 394.222 443.666 393.993  c
443.135 393.649 442.572 393.399 441.979 393.243  c
442.400 392.008 l
h
449.745 392.165 m
451.339 391.961 l
451.516 392.857 451.823 393.503 452.261 393.899  c
452.698 394.295 453.229 394.493 453.854 394.493  c
454.604 394.493 455.235 394.237 455.745 393.727  c
456.256 393.206 456.511 392.566 456.511 391.805  c
456.511 391.076 456.271 390.477 455.792 390.008  c
455.323 389.529 454.724 389.290 453.995 389.290  c
453.693 389.290 453.318 389.352 452.870 389.477  c
453.042 388.086 l
453.146 388.097 453.235 388.102 453.308 388.102  c
453.974 388.102 454.578 387.925 455.120 387.571  c
455.662 387.217 455.933 386.675 455.933 385.946  c
455.933 385.362 455.735 384.883 455.339 384.508  c
454.943 384.123 454.438 383.930 453.823 383.930  c
453.209 383.930 452.693 384.123 452.276 384.508  c
451.870 384.894 451.610 385.477 451.495 386.258  c
449.917 385.977 l
450.104 384.915 450.542 384.092 451.229 383.508  c
451.917 382.925 452.771 382.633 453.792 382.633  c
454.490 382.633 455.136 382.784 455.729 383.086  c
456.323 383.389 456.776 383.800 457.089 384.321  c
457.401 384.842 457.558 385.394 457.558 385.977  c
457.558 386.540 457.407 387.050 457.104 387.508  c
456.813 387.956 456.370 388.316 455.776 388.586  c
456.537 388.764 457.125 389.133 457.542 389.696  c
457.969 390.248 458.183 390.935 458.183 391.758  c
458.183 392.883 457.771 393.842 456.948 394.633  c
456.136 395.415 455.104 395.805 453.854 395.805  c
452.719 395.805 451.776 395.467 451.026 394.790  c
450.287 394.112 449.860 393.237 449.745 392.165  c
h
f
2 J
10.0000 M
4.00000 w
0 J
1.45000 M
newpath
561.500 300.500 m
494.750 300.500 l
S
newpath
494.750 307.375 m
494.750 293.625 l
h
f
1.00000 w
2 J
10.0000 M
newpath
494.750 307.375 m
494.750 293.625 l
h
S
4.00000 w
0 J
1.45000 M
1.00000 w
2 J
10.0000 M
4.00000 w
0 J
1.45000 M
newpath
651.500 300.500 m
870.250 300.500 l
S
newpath
870.250 293.625 m
870.250 307.375 l
h
f
1.00000 w
2 J
10.0000 M
newpath
870.250 293.625 m
870.250 307.375 l
h
S
4.00000 w
0 J
1.45000 M
1.00000 w
2 J
10.0000 M
4.00000 w
0 J
1.45000 M
newpath
582.000 344.500 m
870.250 344.500 l
S
newpath
870.250 337.625 m
870.250 351.375 l
h
f
1.00000 w
2 J
10.0000 M
newpath
870.250 337.625 m
870.250 351.375 l
h
S
4.00000 w
0 J
1.45000 M
1.00000 w
2 J
10.0000 M
4.00000 w
0 J
1.45000 M
newpath
734.000 388.500 m
494.750 388.500 l
S
newpath
494.750 395.375 m
494.750 381.625 l
h
f
1.00000 w
2 J
10.0000 M
newpath
494.750 395.375 m
494.750 381.625 l
h
S
4.00000 w
0 J
1.45000 M
1.00000 w
2 J
10.0000 M
4.00000 w
0 J
1.45000 M
newpath
824.000 388.500 m
870.250 388.500 l
S
newpath
870.250 381.625 m
870.250 395.375 l
h
f
1.00000 w
2 J
10.0000 M
newpath
870.250 381.625 m
870.250 395.375 l
h
S
4.00000 w
0 J
1.45000 M
1.00000 w
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore

%%Trailer
%%EOF
