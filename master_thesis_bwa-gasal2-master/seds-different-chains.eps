%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 591 145
%%Creator: yExport 1.5
%%Producer: org.freehep.graphicsio.ps.EPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Monday, July 15, 2019 at 11:05:27 PM Central European Summer Time
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
591 145 setpagesize
0 0 0 0 setmargins
0 0 setorigin
591 145 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
591.000 0.00000 l
591.000 145.000 l
0.00000 145.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
591.000 0.00000 l
591.000 145.000 l
0.00000 145.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 591 145 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -387.000 -272.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
387.000 272.000 m
978.000 272.000 l
978.000 417.000 l
387.000 417.000 l
387.000 272.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -387.000 -272.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -387.000 -272.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -387.000 -272.000 ] defaultmatrix matrix concatmatrix setmatrix
1.00000 .800000 0.00000 RG
newpath
561.500 288.000 m
651.500 288.000 l
651.500 313.000 l
561.500 313.000 l
561.500 288.000 l
h
f
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
561.500 288.000 m
651.500 288.000 l
651.500 313.000 l
561.500 313.000 l
561.500 288.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
592.266 304.149 m
593.812 304.352 l
593.646 305.425 593.214 306.269 592.516 306.883  c
591.818 307.487 590.958 307.790 589.938 307.790  c
588.656 307.790 587.625 307.373 586.844 306.540  c
586.073 305.696 585.688 304.498 585.688 302.946  c
585.688 301.935 585.854 301.055 586.188 300.305  c
586.521 299.545 587.026 298.977 587.703 298.602  c
588.391 298.217 589.135 298.024 589.938 298.024  c
590.958 298.024 591.786 298.284 592.422 298.805  c
593.068 299.316 593.484 300.040 593.672 300.977  c
592.125 301.211 l
591.979 300.586 591.719 300.118 591.344 299.805  c
590.979 299.482 590.531 299.321 590.000 299.321  c
589.208 299.321 588.562 299.607 588.062 300.180  c
587.562 300.753 587.312 301.659 587.312 302.899  c
587.312 304.149 587.552 305.060 588.031 305.633  c
588.510 306.196 589.141 306.477 589.922 306.477  c
590.536 306.477 591.052 306.290 591.469 305.915  c
591.885 305.529 592.151 304.941 592.266 304.149  c
h
595.172 307.571 m
595.172 294.680 l
596.750 294.680 l
596.750 299.305 l
597.490 298.451 598.422 298.024 599.547 298.024  c
600.234 298.024 600.833 298.159 601.344 298.430  c
601.854 298.701 602.219 299.081 602.438 299.571  c
602.667 300.050 602.781 300.743 602.781 301.649  c
602.781 307.571 l
601.188 307.571 l
601.188 301.649 l
601.188 300.857 601.016 300.284 600.672 299.930  c
600.328 299.566 599.844 299.383 599.219 299.383  c
598.750 299.383 598.307 299.508 597.891 299.758  c
597.484 299.998 597.193 300.326 597.016 300.743  c
596.839 301.159 596.750 301.732 596.750 302.461  c
596.750 307.571 l
595.172 307.571 l
h
611.276 306.415 m
610.693 306.915 610.125 307.269 609.573 307.477  c
609.032 307.685 608.453 307.790 607.839 307.790  c
606.808 307.790 606.016 307.540 605.464 307.040  c
604.922 306.529 604.651 305.883 604.651 305.102  c
604.651 304.654 604.756 304.243 604.964 303.868  c
605.172 303.482 605.443 303.175 605.776 302.946  c
606.110 302.717 606.490 302.545 606.917 302.430  c
607.229 302.347 607.698 302.269 608.323 302.196  c
609.594 302.040 610.532 301.857 611.136 301.649  c
611.146 301.430 611.151 301.290 611.151 301.227  c
611.151 300.592 611.000 300.139 610.698 299.868  c
610.292 299.514 609.693 299.336 608.901 299.336  c
608.151 299.336 607.599 299.467 607.245 299.727  c
606.891 299.987 606.631 300.451 606.464 301.118  c
604.917 300.899 l
605.063 300.232 605.292 299.696 605.604 299.290  c
605.927 298.883 606.391 298.571 606.995 298.352  c
607.610 298.133 608.323 298.024 609.136 298.024  c
609.927 298.024 610.573 298.118 611.073 298.305  c
611.573 298.493 611.938 298.732 612.167 299.024  c
612.407 299.305 612.573 299.659 612.667 300.086  c
612.719 300.357 612.745 300.847 612.745 301.555  c
612.745 303.665 l
612.745 305.133 612.776 306.066 612.839 306.461  c
612.912 306.847 613.047 307.217 613.245 307.571  c
611.589 307.571 l
611.422 307.237 611.318 306.852 611.276 306.415  c
h
611.136 302.883 m
610.563 303.123 609.703 303.321 608.558 303.477  c
607.912 303.571 607.453 303.680 607.183 303.805  c
606.912 303.920 606.703 304.092 606.558 304.321  c
606.412 304.540 606.339 304.790 606.339 305.071  c
606.339 305.487 606.495 305.836 606.808 306.118  c
607.131 306.399 607.599 306.540 608.214 306.540  c
608.828 306.540 609.370 306.409 609.839 306.149  c
610.318 305.878 610.667 305.514 610.886 305.055  c
611.052 304.691 611.136 304.159 611.136 303.461  c
611.136 302.883 l
h
615.209 296.508 m
615.209 294.680 l
616.787 294.680 l
616.787 296.508 l
615.209 296.508 l
h
615.209 307.571 m
615.209 298.243 l
616.787 298.243 l
616.787 307.571 l
615.209 307.571 l
h
619.192 307.571 m
619.192 298.243 l
620.614 298.243 l
620.614 299.571 l
621.302 298.540 622.291 298.024 623.583 298.024  c
624.146 298.024 624.661 298.128 625.130 298.336  c
625.609 298.534 625.963 298.800 626.192 299.133  c
626.432 299.456 626.599 299.842 626.692 300.290  c
626.744 300.581 626.771 301.097 626.771 301.836  c
626.771 307.571 l
625.192 307.571 l
625.192 301.899 l
625.192 301.253 625.130 300.769 625.005 300.446  c
624.890 300.123 624.672 299.868 624.349 299.680  c
624.036 299.493 623.672 299.399 623.255 299.399  c
622.578 299.399 621.994 299.612 621.505 300.040  c
621.015 300.467 620.771 301.279 620.771 302.477  c
620.771 307.571 l
619.192 307.571 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
446.150 306.196 m
446.942 306.737 447.671 307.133 448.338 307.383  c
447.838 308.571 l
446.911 308.237 445.989 307.711 445.072 306.993  c
444.114 307.524 443.057 307.790 441.900 307.790  c
440.734 307.790 439.676 307.508 438.729 306.946  c
437.781 306.383 437.051 305.592 436.541 304.571  c
436.031 303.550 435.775 302.404 435.775 301.133  c
435.775 299.862 436.031 298.706 436.541 297.665  c
437.062 296.612 437.796 295.816 438.744 295.274  c
439.692 294.732 440.755 294.461 441.932 294.461  c
443.130 294.461 444.202 294.743 445.150 295.305  c
446.109 295.868 446.838 296.659 447.338 297.680  c
447.838 298.691 448.088 299.836 448.088 301.118  c
448.088 302.180 447.926 303.133 447.604 303.977  c
447.281 304.821 446.796 305.560 446.150 306.196  c
h
442.400 304.008 m
443.380 304.290 444.187 304.701 444.822 305.243  c
445.833 304.326 446.338 302.951 446.338 301.118  c
446.338 300.076 446.161 299.165 445.807 298.383  c
445.452 297.602 444.932 296.998 444.244 296.571  c
443.567 296.144 442.801 295.930 441.947 295.930  c
440.676 295.930 439.619 296.368 438.775 297.243  c
437.942 298.107 437.525 299.404 437.525 301.133  c
437.525 302.810 437.937 304.097 438.760 304.993  c
439.593 305.889 440.656 306.336 441.947 306.336  c
442.551 306.336 443.124 306.222 443.666 305.993  c
443.135 305.649 442.572 305.399 441.979 305.243  c
442.400 304.008 l
h
455.698 307.571 m
454.120 307.571 l
454.120 297.493 l
453.735 297.857 453.235 298.222 452.620 298.586  c
452.006 298.941 451.448 299.211 450.948 299.399  c
450.948 297.868 l
451.834 297.451 452.610 296.946 453.276 296.352  c
453.943 295.758 454.412 295.185 454.683 294.633  c
455.698 294.633 l
455.698 307.571 l
h
f
2 J
10.0000 M
1.00000 .800000 0.00000 RG
newpath
492.000 332.000 m
582.000 332.000 l
582.000 357.000 l
492.000 357.000 l
492.000 332.000 l
h
f
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
492.000 332.000 m
582.000 332.000 l
582.000 357.000 l
492.000 357.000 l
492.000 332.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
522.766 348.149 m
524.312 348.352 l
524.146 349.425 523.714 350.269 523.016 350.883  c
522.318 351.487 521.458 351.790 520.438 351.790  c
519.156 351.790 518.125 351.373 517.344 350.540  c
516.573 349.696 516.188 348.498 516.188 346.946  c
516.188 345.935 516.354 345.055 516.688 344.305  c
517.021 343.545 517.526 342.977 518.203 342.602  c
518.891 342.217 519.635 342.024 520.438 342.024  c
521.458 342.024 522.286 342.284 522.922 342.805  c
523.568 343.316 523.984 344.040 524.172 344.977  c
522.625 345.211 l
522.479 344.586 522.219 344.118 521.844 343.805  c
521.479 343.482 521.031 343.321 520.500 343.321  c
519.708 343.321 519.062 343.607 518.562 344.180  c
518.062 344.753 517.812 345.659 517.812 346.899  c
517.812 348.149 518.052 349.060 518.531 349.633  c
519.010 350.196 519.641 350.477 520.422 350.477  c
521.036 350.477 521.552 350.290 521.969 349.915  c
522.385 349.529 522.651 348.941 522.766 348.149  c
h
525.672 351.571 m
525.672 338.680 l
527.250 338.680 l
527.250 343.305 l
527.990 342.451 528.922 342.024 530.047 342.024  c
530.734 342.024 531.333 342.159 531.844 342.430  c
532.354 342.701 532.719 343.081 532.938 343.571  c
533.167 344.050 533.281 344.743 533.281 345.649  c
533.281 351.571 l
531.688 351.571 l
531.688 345.649 l
531.688 344.857 531.516 344.284 531.172 343.930  c
530.828 343.566 530.344 343.383 529.719 343.383  c
529.250 343.383 528.807 343.508 528.391 343.758  c
527.984 343.998 527.693 344.326 527.516 344.743  c
527.339 345.159 527.250 345.732 527.250 346.461  c
527.250 351.571 l
525.672 351.571 l
h
541.776 350.415 m
541.193 350.915 540.625 351.269 540.073 351.477  c
539.532 351.685 538.953 351.790 538.339 351.790  c
537.308 351.790 536.516 351.540 535.964 351.040  c
535.422 350.529 535.151 349.883 535.151 349.102  c
535.151 348.654 535.256 348.243 535.464 347.868  c
535.672 347.482 535.943 347.175 536.276 346.946  c
536.610 346.717 536.990 346.545 537.417 346.430  c
537.729 346.347 538.198 346.269 538.823 346.196  c
540.094 346.040 541.032 345.857 541.636 345.649  c
541.646 345.430 541.651 345.290 541.651 345.227  c
541.651 344.592 541.500 344.139 541.198 343.868  c
540.792 343.514 540.193 343.336 539.401 343.336  c
538.651 343.336 538.099 343.467 537.745 343.727  c
537.391 343.987 537.131 344.451 536.964 345.118  c
535.417 344.899 l
535.563 344.232 535.792 343.696 536.104 343.290  c
536.427 342.883 536.891 342.571 537.495 342.352  c
538.110 342.133 538.823 342.024 539.636 342.024  c
540.427 342.024 541.073 342.118 541.573 342.305  c
542.073 342.493 542.438 342.732 542.667 343.024  c
542.907 343.305 543.073 343.659 543.167 344.086  c
543.219 344.357 543.245 344.847 543.245 345.555  c
543.245 347.665 l
543.245 349.133 543.276 350.066 543.339 350.461  c
543.412 350.847 543.547 351.217 543.745 351.571  c
542.089 351.571 l
541.922 351.237 541.818 350.852 541.776 350.415  c
h
541.636 346.883 m
541.063 347.123 540.203 347.321 539.058 347.477  c
538.412 347.571 537.953 347.680 537.683 347.805  c
537.412 347.920 537.203 348.092 537.058 348.321  c
536.912 348.540 536.839 348.790 536.839 349.071  c
536.839 349.487 536.995 349.836 537.308 350.118  c
537.631 350.399 538.099 350.540 538.714 350.540  c
539.328 350.540 539.870 350.409 540.339 350.149  c
540.818 349.878 541.167 349.514 541.386 349.055  c
541.552 348.691 541.636 348.159 541.636 347.461  c
541.636 346.883 l
h
545.709 340.508 m
545.709 338.680 l
547.287 338.680 l
547.287 340.508 l
545.709 340.508 l
h
545.709 351.571 m
545.709 342.243 l
547.287 342.243 l
547.287 351.571 l
545.709 351.571 l
h
549.692 351.571 m
549.692 342.243 l
551.114 342.243 l
551.114 343.571 l
551.802 342.540 552.791 342.024 554.083 342.024  c
554.646 342.024 555.161 342.128 555.630 342.336  c
556.109 342.534 556.463 342.800 556.692 343.133  c
556.932 343.456 557.099 343.842 557.192 344.290  c
557.244 344.581 557.271 345.097 557.271 345.836  c
557.271 351.571 l
555.692 351.571 l
555.692 345.899 l
555.692 345.253 555.630 344.769 555.505 344.446  c
555.390 344.123 555.172 343.868 554.849 343.680  c
554.536 343.493 554.172 343.399 553.755 343.399  c
553.078 343.399 552.494 343.612 552.005 344.040  c
551.515 344.467 551.271 345.279 551.271 346.477  c
551.271 351.571 l
549.692 351.571 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
446.150 350.196 m
446.942 350.737 447.671 351.133 448.338 351.383  c
447.838 352.571 l
446.911 352.237 445.989 351.711 445.072 350.993  c
444.114 351.524 443.057 351.790 441.900 351.790  c
440.734 351.790 439.676 351.508 438.729 350.946  c
437.781 350.383 437.051 349.592 436.541 348.571  c
436.031 347.550 435.775 346.404 435.775 345.133  c
435.775 343.862 436.031 342.706 436.541 341.665  c
437.062 340.612 437.796 339.816 438.744 339.274  c
439.692 338.732 440.755 338.461 441.932 338.461  c
443.130 338.461 444.202 338.743 445.150 339.305  c
446.109 339.868 446.838 340.659 447.338 341.680  c
447.838 342.691 448.088 343.836 448.088 345.118  c
448.088 346.180 447.926 347.133 447.604 347.977  c
447.281 348.821 446.796 349.560 446.150 350.196  c
h
442.400 348.008 m
443.380 348.290 444.187 348.701 444.822 349.243  c
445.833 348.326 446.338 346.951 446.338 345.118  c
446.338 344.076 446.161 343.165 445.807 342.383  c
445.452 341.602 444.932 340.998 444.244 340.571  c
443.567 340.144 442.801 339.930 441.947 339.930  c
440.676 339.930 439.619 340.368 438.775 341.243  c
437.942 342.107 437.525 343.404 437.525 345.133  c
437.525 346.810 437.937 348.097 438.760 348.993  c
439.593 349.889 440.656 350.336 441.947 350.336  c
442.551 350.336 443.124 350.222 443.666 349.993  c
443.135 349.649 442.572 349.399 441.979 349.243  c
442.400 348.008 l
h
458.058 350.055 m
458.058 351.571 l
449.542 351.571 l
449.532 351.185 449.594 350.821 449.729 350.477  c
449.948 349.894 450.292 349.321 450.761 348.758  c
451.240 348.196 451.933 347.545 452.839 346.805  c
454.235 345.659 455.177 344.753 455.667 344.086  c
456.167 343.409 456.417 342.774 456.417 342.180  c
456.417 341.545 456.193 341.014 455.745 340.586  c
455.297 340.159 454.714 339.946 453.995 339.946  c
453.224 339.946 452.610 340.175 452.151 340.633  c
451.703 341.092 451.474 341.722 451.464 342.524  c
449.839 342.352 l
449.953 341.144 450.370 340.222 451.089 339.586  c
451.818 338.951 452.797 338.633 454.026 338.633  c
455.256 338.633 456.229 338.977 456.948 339.665  c
457.677 340.352 458.042 341.201 458.042 342.211  c
458.042 342.722 457.933 343.227 457.714 343.727  c
457.506 344.227 457.157 344.753 456.667 345.305  c
456.177 345.857 455.365 346.612 454.229 347.571  c
453.282 348.373 452.672 348.915 452.401 349.196  c
452.131 349.477 451.912 349.764 451.745 350.055  c
458.058 350.055 l
h
f
2 J
10.0000 M
1.00000 .800000 0.00000 RG
newpath
734.000 376.000 m
824.000 376.000 l
824.000 401.000 l
734.000 401.000 l
734.000 376.000 l
h
f
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
734.000 376.000 m
824.000 376.000 l
824.000 401.000 l
734.000 401.000 l
734.000 376.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
764.766 392.149 m
766.312 392.352 l
766.146 393.425 765.714 394.269 765.016 394.883  c
764.318 395.487 763.458 395.790 762.438 395.790  c
761.156 395.790 760.125 395.373 759.344 394.540  c
758.573 393.696 758.188 392.498 758.188 390.946  c
758.188 389.935 758.354 389.055 758.688 388.305  c
759.021 387.545 759.526 386.977 760.203 386.602  c
760.891 386.217 761.635 386.024 762.438 386.024  c
763.458 386.024 764.286 386.284 764.922 386.805  c
765.568 387.316 765.984 388.040 766.172 388.977  c
764.625 389.211 l
764.479 388.586 764.219 388.118 763.844 387.805  c
763.479 387.482 763.031 387.321 762.500 387.321  c
761.708 387.321 761.062 387.607 760.562 388.180  c
760.062 388.753 759.812 389.659 759.812 390.899  c
759.812 392.149 760.052 393.060 760.531 393.633  c
761.010 394.196 761.641 394.477 762.422 394.477  c
763.036 394.477 763.552 394.290 763.969 393.915  c
764.385 393.529 764.651 392.941 764.766 392.149  c
h
767.672 395.571 m
767.672 382.680 l
769.250 382.680 l
769.250 387.305 l
769.990 386.451 770.922 386.024 772.047 386.024  c
772.734 386.024 773.333 386.159 773.844 386.430  c
774.354 386.701 774.719 387.081 774.938 387.571  c
775.167 388.050 775.281 388.743 775.281 389.649  c
775.281 395.571 l
773.688 395.571 l
773.688 389.649 l
773.688 388.857 773.516 388.284 773.172 387.930  c
772.828 387.566 772.344 387.383 771.719 387.383  c
771.250 387.383 770.807 387.508 770.391 387.758  c
769.984 387.998 769.693 388.326 769.516 388.743  c
769.339 389.159 769.250 389.732 769.250 390.461  c
769.250 395.571 l
767.672 395.571 l
h
783.776 394.415 m
783.193 394.915 782.625 395.269 782.073 395.477  c
781.532 395.685 780.953 395.790 780.339 395.790  c
779.308 395.790 778.516 395.540 777.964 395.040  c
777.422 394.529 777.151 393.883 777.151 393.102  c
777.151 392.654 777.256 392.243 777.464 391.868  c
777.672 391.482 777.943 391.175 778.276 390.946  c
778.610 390.717 778.990 390.545 779.417 390.430  c
779.729 390.347 780.198 390.269 780.823 390.196  c
782.094 390.040 783.032 389.857 783.636 389.649  c
783.646 389.430 783.651 389.290 783.651 389.227  c
783.651 388.592 783.500 388.139 783.198 387.868  c
782.792 387.514 782.193 387.336 781.401 387.336  c
780.651 387.336 780.099 387.467 779.745 387.727  c
779.391 387.987 779.131 388.451 778.964 389.118  c
777.417 388.899 l
777.563 388.232 777.792 387.696 778.104 387.290  c
778.427 386.883 778.891 386.571 779.495 386.352  c
780.110 386.133 780.823 386.024 781.636 386.024  c
782.427 386.024 783.073 386.118 783.573 386.305  c
784.073 386.493 784.438 386.732 784.667 387.024  c
784.907 387.305 785.073 387.659 785.167 388.086  c
785.219 388.357 785.245 388.847 785.245 389.555  c
785.245 391.665 l
785.245 393.133 785.276 394.066 785.339 394.461  c
785.412 394.847 785.547 395.217 785.745 395.571  c
784.089 395.571 l
783.922 395.237 783.818 394.852 783.776 394.415  c
h
783.636 390.883 m
783.063 391.123 782.203 391.321 781.058 391.477  c
780.412 391.571 779.953 391.680 779.683 391.805  c
779.412 391.920 779.203 392.092 779.058 392.321  c
778.912 392.540 778.839 392.790 778.839 393.071  c
778.839 393.487 778.995 393.836 779.308 394.118  c
779.631 394.399 780.099 394.540 780.714 394.540  c
781.328 394.540 781.870 394.409 782.339 394.149  c
782.818 393.878 783.167 393.514 783.386 393.055  c
783.552 392.691 783.636 392.159 783.636 391.461  c
783.636 390.883 l
h
787.709 384.508 m
787.709 382.680 l
789.287 382.680 l
789.287 384.508 l
787.709 384.508 l
h
787.709 395.571 m
787.709 386.243 l
789.287 386.243 l
789.287 395.571 l
787.709 395.571 l
h
791.692 395.571 m
791.692 386.243 l
793.114 386.243 l
793.114 387.571 l
793.802 386.540 794.791 386.024 796.083 386.024  c
796.646 386.024 797.161 386.128 797.630 386.336  c
798.109 386.534 798.463 386.800 798.692 387.133  c
798.932 387.456 799.099 387.842 799.192 388.290  c
799.244 388.581 799.271 389.097 799.271 389.836  c
799.271 395.571 l
797.692 395.571 l
797.692 389.899 l
797.692 389.253 797.630 388.769 797.505 388.446  c
797.390 388.123 797.172 387.868 796.849 387.680  c
796.536 387.493 796.172 387.399 795.755 387.399  c
795.078 387.399 794.494 387.612 794.005 388.040  c
793.515 388.467 793.271 389.279 793.271 390.477  c
793.271 395.571 l
791.692 395.571 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
446.150 394.196 m
446.942 394.737 447.671 395.133 448.338 395.383  c
447.838 396.571 l
446.911 396.237 445.989 395.711 445.072 394.993  c
444.114 395.524 443.057 395.790 441.900 395.790  c
440.734 395.790 439.676 395.508 438.729 394.946  c
437.781 394.383 437.051 393.592 436.541 392.571  c
436.031 391.550 435.775 390.404 435.775 389.133  c
435.775 387.862 436.031 386.706 436.541 385.665  c
437.062 384.612 437.796 383.816 438.744 383.274  c
439.692 382.732 440.755 382.461 441.932 382.461  c
443.130 382.461 444.202 382.743 445.150 383.305  c
446.109 383.868 446.838 384.659 447.338 385.680  c
447.838 386.691 448.088 387.836 448.088 389.118  c
448.088 390.180 447.926 391.133 447.604 391.977  c
447.281 392.821 446.796 393.560 446.150 394.196  c
h
442.400 392.008 m
443.380 392.290 444.187 392.701 444.822 393.243  c
445.833 392.326 446.338 390.951 446.338 389.118  c
446.338 388.076 446.161 387.165 445.807 386.383  c
445.452 385.602 444.932 384.998 444.244 384.571  c
443.567 384.144 442.801 383.930 441.947 383.930  c
440.676 383.930 439.619 384.368 438.775 385.243  c
437.942 386.107 437.525 387.404 437.525 389.133  c
437.525 390.810 437.937 392.097 438.760 392.993  c
439.593 393.889 440.656 394.336 441.947 394.336  c
442.551 394.336 443.124 394.222 443.666 393.993  c
443.135 393.649 442.572 393.399 441.979 393.243  c
442.400 392.008 l
h
449.745 392.165 m
451.339 391.961 l
451.516 392.857 451.823 393.503 452.261 393.899  c
452.698 394.295 453.229 394.493 453.854 394.493  c
454.604 394.493 455.235 394.237 455.745 393.727  c
456.256 393.206 456.511 392.566 456.511 391.805  c
456.511 391.076 456.271 390.477 455.792 390.008  c
455.323 389.529 454.724 389.290 453.995 389.290  c
453.693 389.290 453.318 389.352 452.870 389.477  c
453.042 388.086 l
453.146 388.097 453.235 388.102 453.308 388.102  c
453.974 388.102 454.578 387.925 455.120 387.571  c
455.662 387.217 455.933 386.675 455.933 385.946  c
455.933 385.362 455.735 384.883 455.339 384.508  c
454.943 384.123 454.438 383.930 453.823 383.930  c
453.209 383.930 452.693 384.123 452.276 384.508  c
451.870 384.894 451.610 385.477 451.495 386.258  c
449.917 385.977 l
450.104 384.915 450.542 384.092 451.229 383.508  c
451.917 382.925 452.771 382.633 453.792 382.633  c
454.490 382.633 455.136 382.784 455.729 383.086  c
456.323 383.389 456.776 383.800 457.089 384.321  c
457.401 384.842 457.558 385.394 457.558 385.977  c
457.558 386.540 457.407 387.050 457.104 387.508  c
456.813 387.956 456.370 388.316 455.776 388.586  c
456.537 388.764 457.125 389.133 457.542 389.696  c
457.969 390.248 458.183 390.935 458.183 391.758  c
458.183 392.883 457.771 393.842 456.948 394.633  c
456.136 395.415 455.104 395.805 453.854 395.805  c
452.719 395.805 451.776 395.467 451.026 394.790  c
450.287 394.112 449.860 393.237 449.745 392.165  c
h
f
2 J
10.0000 M
4.00000 w
0 J
1.45000 M
newpath
561.500 300.500 m
494.750 300.500 l
S
newpath
494.750 307.375 m
494.750 293.625 l
h
f
1.00000 w
2 J
10.0000 M
newpath
494.750 307.375 m
494.750 293.625 l
h
S
4.00000 w
0 J
1.45000 M
1.00000 w
2 J
10.0000 M
4.00000 w
0 J
1.45000 M
newpath
651.500 300.500 m
870.250 300.500 l
S
newpath
870.250 293.625 m
870.250 307.375 l
h
f
1.00000 w
2 J
10.0000 M
newpath
870.250 293.625 m
870.250 307.375 l
h
S
4.00000 w
0 J
1.45000 M
1.00000 w
2 J
10.0000 M
4.00000 w
0 J
1.45000 M
newpath
582.000 344.500 m
870.250 344.500 l
S
newpath
870.250 337.625 m
870.250 351.375 l
h
f
1.00000 w
2 J
10.0000 M
newpath
870.250 337.625 m
870.250 351.375 l
h
S
4.00000 w
0 J
1.45000 M
1.00000 w
2 J
10.0000 M
4.00000 w
0 J
1.45000 M
newpath
734.000 388.500 m
494.750 388.500 l
S
newpath
494.750 395.375 m
494.750 381.625 l
h
f
1.00000 w
2 J
10.0000 M
newpath
494.750 395.375 m
494.750 381.625 l
h
S
4.00000 w
0 J
1.45000 M
1.00000 w
2 J
10.0000 M
4.00000 w
0 J
1.45000 M
newpath
824.000 388.500 m
870.250 388.500 l
S
newpath
870.250 381.625 m
870.250 395.375 l
h
f
1.00000 w
2 J
10.0000 M
newpath
870.250 381.625 m
870.250 395.375 l
h
S
4.00000 w
0 J
1.45000 M
1.00000 w
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore

%%Trailer
%%EOF
